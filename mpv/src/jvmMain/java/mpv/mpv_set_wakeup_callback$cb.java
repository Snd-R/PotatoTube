// Generated by jextract

package mpv;

import java.lang.foreign.Addressable;
import java.lang.foreign.MemoryAddress;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.MemorySession;

public interface mpv_set_wakeup_callback$cb {

    void apply(MemoryAddress _x0);
    static MemorySegment allocate(mpv_set_wakeup_callback$cb fi, MemorySession session) {
        return RuntimeHelper.upcallStub(mpv_set_wakeup_callback$cb.class, fi, constants$6.mpv_set_wakeup_callback$cb$FUNC, session);
    }
    static mpv_set_wakeup_callback$cb ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (MemoryAddress __x0) -> {
            try {
                constants$6.mpv_set_wakeup_callback$cb$MH.invokeExact((Addressable)symbol, (Addressable)__x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


