// Generated by jextract

package mpv;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;

import static java.lang.foreign.ValueLayout.PathElement;
public class mpv_event_end_file {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("reason"),
        Constants$root.C_INT$LAYOUT.withName("error"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("playlist_entry_id"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("playlist_insert_id"),
        Constants$root.C_INT$LAYOUT.withName("playlist_insert_num_entries"),
        MemoryLayout.paddingLayout(32)
    ).withName("mpv_event_end_file");
    public static MemoryLayout $LAYOUT() {
        return mpv_event_end_file.$struct$LAYOUT;
    }
    static final VarHandle reason$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("reason"));
    public static VarHandle reason$VH() {
        return mpv_event_end_file.reason$VH;
    }
    public static int reason$get(MemorySegment seg) {
        return (int)mpv_event_end_file.reason$VH.get(seg);
    }
    public static void reason$set( MemorySegment seg, int x) {
        mpv_event_end_file.reason$VH.set(seg, x);
    }
    public static int reason$get(MemorySegment seg, long index) {
        return (int)mpv_event_end_file.reason$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reason$set(MemorySegment seg, long index, int x) {
        mpv_event_end_file.reason$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle error$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("error"));
    public static VarHandle error$VH() {
        return mpv_event_end_file.error$VH;
    }
    public static int error$get(MemorySegment seg) {
        return (int)mpv_event_end_file.error$VH.get(seg);
    }
    public static void error$set( MemorySegment seg, int x) {
        mpv_event_end_file.error$VH.set(seg, x);
    }
    public static int error$get(MemorySegment seg, long index) {
        return (int)mpv_event_end_file.error$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void error$set(MemorySegment seg, long index, int x) {
        mpv_event_end_file.error$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle playlist_entry_id$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("playlist_entry_id"));
    public static VarHandle playlist_entry_id$VH() {
        return mpv_event_end_file.playlist_entry_id$VH;
    }
    public static long playlist_entry_id$get(MemorySegment seg) {
        return (long)mpv_event_end_file.playlist_entry_id$VH.get(seg);
    }
    public static void playlist_entry_id$set( MemorySegment seg, long x) {
        mpv_event_end_file.playlist_entry_id$VH.set(seg, x);
    }
    public static long playlist_entry_id$get(MemorySegment seg, long index) {
        return (long)mpv_event_end_file.playlist_entry_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void playlist_entry_id$set(MemorySegment seg, long index, long x) {
        mpv_event_end_file.playlist_entry_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle playlist_insert_id$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("playlist_insert_id"));
    public static VarHandle playlist_insert_id$VH() {
        return mpv_event_end_file.playlist_insert_id$VH;
    }
    public static long playlist_insert_id$get(MemorySegment seg) {
        return (long)mpv_event_end_file.playlist_insert_id$VH.get(seg);
    }
    public static void playlist_insert_id$set( MemorySegment seg, long x) {
        mpv_event_end_file.playlist_insert_id$VH.set(seg, x);
    }
    public static long playlist_insert_id$get(MemorySegment seg, long index) {
        return (long)mpv_event_end_file.playlist_insert_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void playlist_insert_id$set(MemorySegment seg, long index, long x) {
        mpv_event_end_file.playlist_insert_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle playlist_insert_num_entries$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("playlist_insert_num_entries"));
    public static VarHandle playlist_insert_num_entries$VH() {
        return mpv_event_end_file.playlist_insert_num_entries$VH;
    }
    public static int playlist_insert_num_entries$get(MemorySegment seg) {
        return (int)mpv_event_end_file.playlist_insert_num_entries$VH.get(seg);
    }
    public static void playlist_insert_num_entries$set( MemorySegment seg, int x) {
        mpv_event_end_file.playlist_insert_num_entries$VH.set(seg, x);
    }
    public static int playlist_insert_num_entries$get(MemorySegment seg, long index) {
        return (int)mpv_event_end_file.playlist_insert_num_entries$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void playlist_insert_num_entries$set(MemorySegment seg, long index, int x) {
        mpv_event_end_file.playlist_insert_num_entries$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


