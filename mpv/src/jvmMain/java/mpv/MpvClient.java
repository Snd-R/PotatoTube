// Generated by jextract

package mpv;

import java.lang.foreign.Addressable;
import java.lang.foreign.MemoryAddress;
import java.lang.invoke.MethodHandle;

import static java.lang.foreign.ValueLayout.*;
public class MpvClient  {

    /* package-private */ MpvClient() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int _STDINT_H() {
        return (int)1L;
    }
    public static int _FEATURES_H() {
        return (int)1L;
    }
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    public static int __USE_POSIX() {
        return (int)1L;
    }
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    public static int __WORDSIZE() {
        return (int)64L;
    }
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    public static int __USE_MISC() {
        return (int)1L;
    }
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    public static int __GLIBC__() {
        return (int)2L;
    }
    public static int __GLIBC_MINOR__() {
        return (int)37L;
    }
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int)0L;
    }
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    public static int __GLIBC_USE_LIB_EXT2() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return (int)0L;
    }
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return (int)1L;
    }
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    public static int _BITS_WCHAR_H() {
        return (int)1L;
    }
    public static int _BITS_STDINT_INTN_H() {
        return (int)1L;
    }
    public static int _BITS_STDINT_UINTN_H() {
        return (int)1L;
    }
    public static int MPV_ENABLE_DEPRECATED() {
        return (int)1L;
    }
    public static OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt wchar_t = Constants$root.C_INT$LAYOUT;
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast16_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast32_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle mpv_client_api_version$MH() {
        return RuntimeHelper.requireNonNull(constants$0.mpv_client_api_version$MH,"mpv_client_api_version");
    }
    public static long mpv_client_api_version () {
        var mh$ = mpv_client_api_version$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int MPV_ERROR_SUCCESS() {
        return (int)0L;
    }
    public static int MPV_ERROR_EVENT_QUEUE_FULL() {
        return (int)-1L;
    }
    public static int MPV_ERROR_NOMEM() {
        return (int)-2L;
    }
    public static int MPV_ERROR_UNINITIALIZED() {
        return (int)-3L;
    }
    public static int MPV_ERROR_INVALID_PARAMETER() {
        return (int)-4L;
    }
    public static int MPV_ERROR_OPTION_NOT_FOUND() {
        return (int)-5L;
    }
    public static int MPV_ERROR_OPTION_FORMAT() {
        return (int)-6L;
    }
    public static int MPV_ERROR_OPTION_ERROR() {
        return (int)-7L;
    }
    public static int MPV_ERROR_PROPERTY_NOT_FOUND() {
        return (int)-8L;
    }
    public static int MPV_ERROR_PROPERTY_FORMAT() {
        return (int)-9L;
    }
    public static int MPV_ERROR_PROPERTY_UNAVAILABLE() {
        return (int)-10L;
    }
    public static int MPV_ERROR_PROPERTY_ERROR() {
        return (int)-11L;
    }
    public static int MPV_ERROR_COMMAND() {
        return (int)-12L;
    }
    public static int MPV_ERROR_LOADING_FAILED() {
        return (int)-13L;
    }
    public static int MPV_ERROR_AO_INIT_FAILED() {
        return (int)-14L;
    }
    public static int MPV_ERROR_VO_INIT_FAILED() {
        return (int)-15L;
    }
    public static int MPV_ERROR_NOTHING_TO_PLAY() {
        return (int)-16L;
    }
    public static int MPV_ERROR_UNKNOWN_FORMAT() {
        return (int)-17L;
    }
    public static int MPV_ERROR_UNSUPPORTED() {
        return (int)-18L;
    }
    public static int MPV_ERROR_NOT_IMPLEMENTED() {
        return (int)-19L;
    }
    public static int MPV_ERROR_GENERIC() {
        return (int)-20L;
    }
    public static MethodHandle mpv_error_string$MH() {
        return RuntimeHelper.requireNonNull(constants$0.mpv_error_string$MH,"mpv_error_string");
    }
    public static MemoryAddress mpv_error_string ( int error) {
        var mh$ = mpv_error_string$MH();
        try {
            return (MemoryAddress)mh$.invokeExact(error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_free$MH() {
        return RuntimeHelper.requireNonNull(constants$0.mpv_free$MH,"mpv_free");
    }
    public static void mpv_free ( Addressable data) {
        var mh$ = mpv_free$MH();
        try {
            mh$.invokeExact(data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_client_name$MH() {
        return RuntimeHelper.requireNonNull(constants$0.mpv_client_name$MH,"mpv_client_name");
    }
    public static MemoryAddress mpv_client_name ( Addressable ctx) {
        var mh$ = mpv_client_name$MH();
        try {
            return (MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_client_id$MH() {
        return RuntimeHelper.requireNonNull(constants$0.mpv_client_id$MH,"mpv_client_id");
    }
    public static long mpv_client_id ( Addressable ctx) {
        var mh$ = mpv_client_id$MH();
        try {
            return (long)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_create$MH() {
        return RuntimeHelper.requireNonNull(constants$0.mpv_create$MH,"mpv_create");
    }
    public static MemoryAddress mpv_create () {
        var mh$ = mpv_create$MH();
        try {
            return (MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_initialize$MH() {
        return RuntimeHelper.requireNonNull(constants$1.mpv_initialize$MH,"mpv_initialize");
    }
    public static int mpv_initialize ( Addressable ctx) {
        var mh$ = mpv_initialize$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$1.mpv_destroy$MH,"mpv_destroy");
    }
    public static void mpv_destroy ( Addressable ctx) {
        var mh$ = mpv_destroy$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_terminate_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$1.mpv_terminate_destroy$MH,"mpv_terminate_destroy");
    }
    public static void mpv_terminate_destroy ( Addressable ctx) {
        var mh$ = mpv_terminate_destroy$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_create_client$MH() {
        return RuntimeHelper.requireNonNull(constants$1.mpv_create_client$MH,"mpv_create_client");
    }
    public static MemoryAddress mpv_create_client ( Addressable ctx,  Addressable name) {
        var mh$ = mpv_create_client$MH();
        try {
            return (MemoryAddress)mh$.invokeExact(ctx, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_create_weak_client$MH() {
        return RuntimeHelper.requireNonNull(constants$1.mpv_create_weak_client$MH,"mpv_create_weak_client");
    }
    public static MemoryAddress mpv_create_weak_client ( Addressable ctx,  Addressable name) {
        var mh$ = mpv_create_weak_client$MH();
        try {
            return (MemoryAddress)mh$.invokeExact(ctx, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_load_config_file$MH() {
        return RuntimeHelper.requireNonNull(constants$1.mpv_load_config_file$MH,"mpv_load_config_file");
    }
    public static int mpv_load_config_file ( Addressable ctx,  Addressable filename) {
        var mh$ = mpv_load_config_file$MH();
        try {
            return (int)mh$.invokeExact(ctx, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_get_time_us$MH() {
        return RuntimeHelper.requireNonNull(constants$2.mpv_get_time_us$MH,"mpv_get_time_us");
    }
    public static long mpv_get_time_us ( Addressable ctx) {
        var mh$ = mpv_get_time_us$MH();
        try {
            return (long)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int MPV_FORMAT_NONE() {
        return (int)0L;
    }
    public static int MPV_FORMAT_STRING() {
        return (int)1L;
    }
    public static int MPV_FORMAT_OSD_STRING() {
        return (int)2L;
    }
    public static int MPV_FORMAT_FLAG() {
        return (int)3L;
    }
    public static int MPV_FORMAT_INT64() {
        return (int)4L;
    }
    public static int MPV_FORMAT_DOUBLE() {
        return (int)5L;
    }
    public static int MPV_FORMAT_NODE() {
        return (int)6L;
    }
    public static int MPV_FORMAT_NODE_ARRAY() {
        return (int)7L;
    }
    public static int MPV_FORMAT_NODE_MAP() {
        return (int)8L;
    }
    public static int MPV_FORMAT_BYTE_ARRAY() {
        return (int)9L;
    }
    public static MethodHandle mpv_free_node_contents$MH() {
        return RuntimeHelper.requireNonNull(constants$2.mpv_free_node_contents$MH,"mpv_free_node_contents");
    }
    public static void mpv_free_node_contents ( Addressable node) {
        var mh$ = mpv_free_node_contents$MH();
        try {
            mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_set_option$MH() {
        return RuntimeHelper.requireNonNull(constants$2.mpv_set_option$MH,"mpv_set_option");
    }
    public static int mpv_set_option ( Addressable ctx,  Addressable name,  int format,  Addressable data) {
        var mh$ = mpv_set_option$MH();
        try {
            return (int)mh$.invokeExact(ctx, name, format, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_set_option_string$MH() {
        return RuntimeHelper.requireNonNull(constants$2.mpv_set_option_string$MH,"mpv_set_option_string");
    }
    public static int mpv_set_option_string ( Addressable ctx,  Addressable name,  Addressable data) {
        var mh$ = mpv_set_option_string$MH();
        try {
            return (int)mh$.invokeExact(ctx, name, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_command$MH() {
        return RuntimeHelper.requireNonNull(constants$2.mpv_command$MH,"mpv_command");
    }
    public static int mpv_command ( Addressable ctx,  Addressable args) {
        var mh$ = mpv_command$MH();
        try {
            return (int)mh$.invokeExact(ctx, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_command_node$MH() {
        return RuntimeHelper.requireNonNull(constants$2.mpv_command_node$MH,"mpv_command_node");
    }
    public static int mpv_command_node ( Addressable ctx,  Addressable args,  Addressable result) {
        var mh$ = mpv_command_node$MH();
        try {
            return (int)mh$.invokeExact(ctx, args, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_command_ret$MH() {
        return RuntimeHelper.requireNonNull(constants$3.mpv_command_ret$MH,"mpv_command_ret");
    }
    public static int mpv_command_ret ( Addressable ctx,  Addressable args,  Addressable result) {
        var mh$ = mpv_command_ret$MH();
        try {
            return (int)mh$.invokeExact(ctx, args, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_command_string$MH() {
        return RuntimeHelper.requireNonNull(constants$3.mpv_command_string$MH,"mpv_command_string");
    }
    public static int mpv_command_string ( Addressable ctx,  Addressable args) {
        var mh$ = mpv_command_string$MH();
        try {
            return (int)mh$.invokeExact(ctx, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_command_async$MH() {
        return RuntimeHelper.requireNonNull(constants$3.mpv_command_async$MH,"mpv_command_async");
    }
    public static int mpv_command_async ( Addressable ctx,  long reply_userdata,  Addressable args) {
        var mh$ = mpv_command_async$MH();
        try {
            return (int)mh$.invokeExact(ctx, reply_userdata, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_command_node_async$MH() {
        return RuntimeHelper.requireNonNull(constants$3.mpv_command_node_async$MH,"mpv_command_node_async");
    }
    public static int mpv_command_node_async ( Addressable ctx,  long reply_userdata,  Addressable args) {
        var mh$ = mpv_command_node_async$MH();
        try {
            return (int)mh$.invokeExact(ctx, reply_userdata, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_abort_async_command$MH() {
        return RuntimeHelper.requireNonNull(constants$3.mpv_abort_async_command$MH,"mpv_abort_async_command");
    }
    public static void mpv_abort_async_command ( Addressable ctx,  long reply_userdata) {
        var mh$ = mpv_abort_async_command$MH();
        try {
            mh$.invokeExact(ctx, reply_userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_set_property$MH() {
        return RuntimeHelper.requireNonNull(constants$3.mpv_set_property$MH,"mpv_set_property");
    }
    public static int mpv_set_property ( Addressable ctx,  Addressable name,  int format,  Addressable data) {
        var mh$ = mpv_set_property$MH();
        try {
            return (int)mh$.invokeExact(ctx, name, format, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_set_property_string$MH() {
        return RuntimeHelper.requireNonNull(constants$4.mpv_set_property_string$MH,"mpv_set_property_string");
    }
    public static int mpv_set_property_string ( Addressable ctx,  Addressable name,  Addressable data) {
        var mh$ = mpv_set_property_string$MH();
        try {
            return (int)mh$.invokeExact(ctx, name, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_del_property$MH() {
        return RuntimeHelper.requireNonNull(constants$4.mpv_del_property$MH,"mpv_del_property");
    }
    public static int mpv_del_property ( Addressable ctx,  Addressable name) {
        var mh$ = mpv_del_property$MH();
        try {
            return (int)mh$.invokeExact(ctx, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_set_property_async$MH() {
        return RuntimeHelper.requireNonNull(constants$4.mpv_set_property_async$MH,"mpv_set_property_async");
    }
    public static int mpv_set_property_async ( Addressable ctx,  long reply_userdata,  Addressable name,  int format,  Addressable data) {
        var mh$ = mpv_set_property_async$MH();
        try {
            return (int)mh$.invokeExact(ctx, reply_userdata, name, format, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_get_property$MH() {
        return RuntimeHelper.requireNonNull(constants$4.mpv_get_property$MH,"mpv_get_property");
    }
    public static int mpv_get_property ( Addressable ctx,  Addressable name,  int format,  Addressable data) {
        var mh$ = mpv_get_property$MH();
        try {
            return (int)mh$.invokeExact(ctx, name, format, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_get_property_string$MH() {
        return RuntimeHelper.requireNonNull(constants$4.mpv_get_property_string$MH,"mpv_get_property_string");
    }
    public static MemoryAddress mpv_get_property_string ( Addressable ctx,  Addressable name) {
        var mh$ = mpv_get_property_string$MH();
        try {
            return (MemoryAddress)mh$.invokeExact(ctx, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_get_property_osd_string$MH() {
        return RuntimeHelper.requireNonNull(constants$4.mpv_get_property_osd_string$MH,"mpv_get_property_osd_string");
    }
    public static MemoryAddress mpv_get_property_osd_string ( Addressable ctx,  Addressable name) {
        var mh$ = mpv_get_property_osd_string$MH();
        try {
            return (MemoryAddress)mh$.invokeExact(ctx, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_get_property_async$MH() {
        return RuntimeHelper.requireNonNull(constants$5.mpv_get_property_async$MH,"mpv_get_property_async");
    }
    public static int mpv_get_property_async ( Addressable ctx,  long reply_userdata,  Addressable name,  int format) {
        var mh$ = mpv_get_property_async$MH();
        try {
            return (int)mh$.invokeExact(ctx, reply_userdata, name, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_observe_property$MH() {
        return RuntimeHelper.requireNonNull(constants$5.mpv_observe_property$MH,"mpv_observe_property");
    }
    public static int mpv_observe_property ( Addressable mpv,  long reply_userdata,  Addressable name,  int format) {
        var mh$ = mpv_observe_property$MH();
        try {
            return (int)mh$.invokeExact(mpv, reply_userdata, name, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_unobserve_property$MH() {
        return RuntimeHelper.requireNonNull(constants$5.mpv_unobserve_property$MH,"mpv_unobserve_property");
    }
    public static int mpv_unobserve_property ( Addressable mpv,  long registered_reply_userdata) {
        var mh$ = mpv_unobserve_property$MH();
        try {
            return (int)mh$.invokeExact(mpv, registered_reply_userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int MPV_EVENT_NONE() {
        return (int)0L;
    }
    public static int MPV_EVENT_SHUTDOWN() {
        return (int)1L;
    }
    public static int MPV_EVENT_LOG_MESSAGE() {
        return (int)2L;
    }
    public static int MPV_EVENT_GET_PROPERTY_REPLY() {
        return (int)3L;
    }
    public static int MPV_EVENT_SET_PROPERTY_REPLY() {
        return (int)4L;
    }
    public static int MPV_EVENT_COMMAND_REPLY() {
        return (int)5L;
    }
    public static int MPV_EVENT_START_FILE() {
        return (int)6L;
    }
    public static int MPV_EVENT_END_FILE() {
        return (int)7L;
    }
    public static int MPV_EVENT_FILE_LOADED() {
        return (int)8L;
    }
    public static int MPV_EVENT_IDLE() {
        return (int)11L;
    }
    public static int MPV_EVENT_TICK() {
        return (int)14L;
    }
    public static int MPV_EVENT_CLIENT_MESSAGE() {
        return (int)16L;
    }
    public static int MPV_EVENT_VIDEO_RECONFIG() {
        return (int)17L;
    }
    public static int MPV_EVENT_AUDIO_RECONFIG() {
        return (int)18L;
    }
    public static int MPV_EVENT_SEEK() {
        return (int)20L;
    }
    public static int MPV_EVENT_PLAYBACK_RESTART() {
        return (int)21L;
    }
    public static int MPV_EVENT_PROPERTY_CHANGE() {
        return (int)22L;
    }
    public static int MPV_EVENT_QUEUE_OVERFLOW() {
        return (int)24L;
    }
    public static int MPV_EVENT_HOOK() {
        return (int)25L;
    }
    public static MethodHandle mpv_event_name$MH() {
        return RuntimeHelper.requireNonNull(constants$5.mpv_event_name$MH,"mpv_event_name");
    }
    public static MemoryAddress mpv_event_name ( int event) {
        var mh$ = mpv_event_name$MH();
        try {
            return (MemoryAddress)mh$.invokeExact(event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int MPV_LOG_LEVEL_NONE() {
        return (int)0L;
    }
    public static int MPV_LOG_LEVEL_FATAL() {
        return (int)10L;
    }
    public static int MPV_LOG_LEVEL_ERROR() {
        return (int)20L;
    }
    public static int MPV_LOG_LEVEL_WARN() {
        return (int)30L;
    }
    public static int MPV_LOG_LEVEL_INFO() {
        return (int)40L;
    }
    public static int MPV_LOG_LEVEL_V() {
        return (int)50L;
    }
    public static int MPV_LOG_LEVEL_DEBUG() {
        return (int)60L;
    }
    public static int MPV_LOG_LEVEL_TRACE() {
        return (int)70L;
    }
    public static int MPV_END_FILE_REASON_EOF() {
        return (int)0L;
    }
    public static int MPV_END_FILE_REASON_STOP() {
        return (int)2L;
    }
    public static int MPV_END_FILE_REASON_QUIT() {
        return (int)3L;
    }
    public static int MPV_END_FILE_REASON_ERROR() {
        return (int)4L;
    }
    public static int MPV_END_FILE_REASON_REDIRECT() {
        return (int)5L;
    }
    public static MethodHandle mpv_event_to_node$MH() {
        return RuntimeHelper.requireNonNull(constants$5.mpv_event_to_node$MH,"mpv_event_to_node");
    }
    public static int mpv_event_to_node ( Addressable dst,  Addressable src) {
        var mh$ = mpv_event_to_node$MH();
        try {
            return (int)mh$.invokeExact(dst, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_request_event$MH() {
        return RuntimeHelper.requireNonNull(constants$5.mpv_request_event$MH,"mpv_request_event");
    }
    public static int mpv_request_event ( Addressable ctx,  int event,  int enable) {
        var mh$ = mpv_request_event$MH();
        try {
            return (int)mh$.invokeExact(ctx, event, enable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_request_log_messages$MH() {
        return RuntimeHelper.requireNonNull(constants$6.mpv_request_log_messages$MH,"mpv_request_log_messages");
    }
    public static int mpv_request_log_messages ( Addressable ctx,  Addressable min_level) {
        var mh$ = mpv_request_log_messages$MH();
        try {
            return (int)mh$.invokeExact(ctx, min_level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_wait_event$MH() {
        return RuntimeHelper.requireNonNull(constants$6.mpv_wait_event$MH,"mpv_wait_event");
    }
    public static MemoryAddress mpv_wait_event ( Addressable ctx,  double timeout) {
        var mh$ = mpv_wait_event$MH();
        try {
            return (MemoryAddress)mh$.invokeExact(ctx, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_wakeup$MH() {
        return RuntimeHelper.requireNonNull(constants$6.mpv_wakeup$MH,"mpv_wakeup");
    }
    public static void mpv_wakeup ( Addressable ctx) {
        var mh$ = mpv_wakeup$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_set_wakeup_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$6.mpv_set_wakeup_callback$MH,"mpv_set_wakeup_callback");
    }
    public static void mpv_set_wakeup_callback ( Addressable ctx,  Addressable cb,  Addressable d) {
        var mh$ = mpv_set_wakeup_callback$MH();
        try {
            mh$.invokeExact(ctx, cb, d);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_wait_async_requests$MH() {
        return RuntimeHelper.requireNonNull(constants$7.mpv_wait_async_requests$MH,"mpv_wait_async_requests");
    }
    public static void mpv_wait_async_requests ( Addressable ctx) {
        var mh$ = mpv_wait_async_requests$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_hook_add$MH() {
        return RuntimeHelper.requireNonNull(constants$7.mpv_hook_add$MH,"mpv_hook_add");
    }
    public static int mpv_hook_add ( Addressable ctx,  long reply_userdata,  Addressable name,  int priority) {
        var mh$ = mpv_hook_add$MH();
        try {
            return (int)mh$.invokeExact(ctx, reply_userdata, name, priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_hook_continue$MH() {
        return RuntimeHelper.requireNonNull(constants$7.mpv_hook_continue$MH,"mpv_hook_continue");
    }
    public static int mpv_hook_continue ( Addressable ctx,  long id) {
        var mh$ = mpv_hook_continue$MH();
        try {
            return (int)mh$.invokeExact(ctx, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_get_wakeup_pipe$MH() {
        return RuntimeHelper.requireNonNull(constants$7.mpv_get_wakeup_pipe$MH,"mpv_get_wakeup_pipe");
    }
    public static int mpv_get_wakeup_pipe ( Addressable ctx) {
        var mh$ = mpv_get_wakeup_pipe$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryAddress NULL() {
        return constants$7.NULL$ADDR;
    }
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    public static int __TIMESIZE() {
        return (int)64L;
    }
    public static long __STDC_IEC_60559_BFP__() {
        return 201404L;
    }
    public static long __STDC_IEC_60559_COMPLEX__() {
        return 201404L;
    }
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    public static int __WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int __WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int INT8_MIN() {
        return (int)-128L;
    }
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT8_MAX() {
        return (int)127L;
    }
    public static int INT16_MAX() {
        return (int)32767L;
    }
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT8_MAX() {
        return (int)255L;
    }
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT64_MAX() {
        return -1L;
    }
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    public static long UINT_FAST16_MAX() {
        return -1L;
    }
    public static long UINT_FAST32_MAX() {
        return -1L;
    }
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTPTR_MAX() {
        return -1L;
    }
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTMAX_MAX() {
        return -1L;
    }
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    public static long SIZE_MAX() {
        return -1L;
    }
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int WINT_MIN() {
        return (int)0L;
    }
    public static int WINT_MAX() {
        return (int)4294967295L;
    }
    public static long MPV_CLIENT_API_VERSION() {
        return 131073L;
    }
}


