// Generated by jextract

package mpv;

import java.lang.foreign.Addressable;
import java.lang.foreign.MemoryAddress;
import java.lang.invoke.MethodHandle;

import static java.lang.foreign.ValueLayout.*;
public class MpvClient  {

    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;

    public static MethodHandle mpv_create$MH() {
        return RuntimeHelper.requireNonNull(constants$0.mpv_create$MH,"mpv_create");
    }
    public static MemoryAddress mpv_create () {
        var mh$ = mpv_create$MH();
        try {
            return (MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_initialize$MH() {
        return RuntimeHelper.requireNonNull(constants$1.mpv_initialize$MH,"mpv_initialize");
    }
    public static int mpv_initialize ( Addressable ctx) {
        var mh$ = mpv_initialize$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$1.mpv_destroy$MH,"mpv_destroy");
    }
    public static void mpv_destroy ( Addressable ctx) {
        var mh$ = mpv_destroy$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static int MPV_FORMAT_FLAG() {
        return (int)3L;
    }
    public static int MPV_FORMAT_INT64() {
        return (int)4L;
    }
    public static int MPV_FORMAT_DOUBLE() {
        return (int)5L;
    }

    public static MethodHandle mpv_set_option$MH() {
        return RuntimeHelper.requireNonNull(constants$2.mpv_set_option$MH,"mpv_set_option");
    }
    public static int mpv_set_option ( Addressable ctx,  Addressable name,  int format,  Addressable data) {
        var mh$ = mpv_set_option$MH();
        try {
            return (int)mh$.invokeExact(ctx, name, format, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle mpv_command$MH() {
        return RuntimeHelper.requireNonNull(constants$2.mpv_command$MH,"mpv_command");
    }
    public static int mpv_command ( Addressable ctx,  Addressable args) {
        var mh$ = mpv_command$MH();
        try {
            return (int)mh$.invokeExact(ctx, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle mpv_command_async$MH() {
        return RuntimeHelper.requireNonNull(constants$3.mpv_command_async$MH,"mpv_command_async");
    }
    public static int mpv_command_async ( Addressable ctx,  long reply_userdata,  Addressable args) {
        var mh$ = mpv_command_async$MH();
        try {
            return (int)mh$.invokeExact(ctx, reply_userdata, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle mpv_set_property$MH() {
        return RuntimeHelper.requireNonNull(constants$3.mpv_set_property$MH,"mpv_set_property");
    }
    public static int mpv_set_property ( Addressable ctx,  Addressable name,  int format,  Addressable data) {
        var mh$ = mpv_set_property$MH();
        try {
            return (int)mh$.invokeExact(ctx, name, format, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle mpv_get_property$MH() {
        return RuntimeHelper.requireNonNull(constants$4.mpv_get_property$MH,"mpv_get_property");
    }
    public static int mpv_get_property ( Addressable ctx,  Addressable name,  int format,  Addressable data) {
        var mh$ = mpv_get_property$MH();
        try {
            return (int)mh$.invokeExact(ctx, name, format, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static int MPV_EVENT_LOG_MESSAGE() {
        return (int)2L;
    }

    public static int MPV_EVENT_FILE_LOADED() {
        return (int)8L;
    }

    public static MethodHandle mpv_request_log_messages$MH() {
        return RuntimeHelper.requireNonNull(constants$6.mpv_request_log_messages$MH,"mpv_request_log_messages");
    }
    public static int mpv_request_log_messages ( Addressable ctx,  Addressable min_level) {
        var mh$ = mpv_request_log_messages$MH();
        try {
            return (int)mh$.invokeExact(ctx, min_level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mpv_wait_event$MH() {
        return RuntimeHelper.requireNonNull(constants$6.mpv_wait_event$MH,"mpv_wait_event");
    }
    public static MemoryAddress mpv_wait_event ( Addressable ctx,  double timeout) {
        var mh$ = mpv_wait_event$MH();
        try {
            return (MemoryAddress)mh$.invokeExact(ctx, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

}


