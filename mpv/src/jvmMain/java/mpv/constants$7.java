// Generated by jextract

package mpv;

import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.MemoryAddress;
import java.lang.invoke.MethodHandle;

class constants$7 {

    static final FunctionDescriptor mpv_wait_async_requests$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mpv_wait_async_requests$MH = RuntimeHelper.downcallHandle(
        "mpv_wait_async_requests",
        constants$7.mpv_wait_async_requests$FUNC
    );
    static final FunctionDescriptor mpv_hook_add$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle mpv_hook_add$MH = RuntimeHelper.downcallHandle(
        "mpv_hook_add",
        constants$7.mpv_hook_add$FUNC
    );
    static final FunctionDescriptor mpv_hook_continue$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle mpv_hook_continue$MH = RuntimeHelper.downcallHandle(
        "mpv_hook_continue",
        constants$7.mpv_hook_continue$FUNC
    );
    static final FunctionDescriptor mpv_get_wakeup_pipe$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mpv_get_wakeup_pipe$MH = RuntimeHelper.downcallHandle(
        "mpv_get_wakeup_pipe",
        constants$7.mpv_get_wakeup_pipe$FUNC
    );
    static final MemoryAddress NULL$ADDR = MemoryAddress.ofLong(0L);
}


