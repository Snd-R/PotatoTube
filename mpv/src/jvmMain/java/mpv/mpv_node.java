// Generated by jextract

package mpv;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;

import static java.lang.foreign.ValueLayout.PathElement;
public class mpv_node {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("string"),
            Constants$root.C_INT$LAYOUT.withName("flag"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("int64"),
            Constants$root.C_DOUBLE$LAYOUT.withName("double_"),
            Constants$root.C_POINTER$LAYOUT.withName("list"),
            Constants$root.C_POINTER$LAYOUT.withName("ba")
        ).withName("u"),
        Constants$root.C_INT$LAYOUT.withName("format"),
        MemoryLayout.paddingLayout(32)
    ).withName("mpv_node");
    public static MemoryLayout $LAYOUT() {
        return mpv_node.$struct$LAYOUT;
    }
    public static class u {

        static final  GroupLayout u$union$LAYOUT = MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("string"),
            Constants$root.C_INT$LAYOUT.withName("flag"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("int64"),
            Constants$root.C_DOUBLE$LAYOUT.withName("double_"),
            Constants$root.C_POINTER$LAYOUT.withName("list"),
            Constants$root.C_POINTER$LAYOUT.withName("ba")
        );
        public static MemoryLayout $LAYOUT() {
            return u.u$union$LAYOUT;
        }
        static final VarHandle string$VH = u$union$LAYOUT.varHandle(PathElement.groupElement("string"));
        public static VarHandle string$VH() {
            return u.string$VH;
        }
        public static MemoryAddress string$get(MemorySegment seg) {
            return (MemoryAddress)u.string$VH.get(seg);
        }
        public static void string$set( MemorySegment seg, MemoryAddress x) {
            u.string$VH.set(seg, x);
        }
        public static MemoryAddress string$get(MemorySegment seg, long index) {
            return (MemoryAddress)u.string$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void string$set(MemorySegment seg, long index, MemoryAddress x) {
            u.string$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle flag$VH = u$union$LAYOUT.varHandle(PathElement.groupElement("flag"));
        public static VarHandle flag$VH() {
            return u.flag$VH;
        }
        public static int flag$get(MemorySegment seg) {
            return (int)u.flag$VH.get(seg);
        }
        public static void flag$set( MemorySegment seg, int x) {
            u.flag$VH.set(seg, x);
        }
        public static int flag$get(MemorySegment seg, long index) {
            return (int)u.flag$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void flag$set(MemorySegment seg, long index, int x) {
            u.flag$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle int64$VH = u$union$LAYOUT.varHandle(PathElement.groupElement("int64"));
        public static VarHandle int64$VH() {
            return u.int64$VH;
        }
        public static long int64$get(MemorySegment seg) {
            return (long)u.int64$VH.get(seg);
        }
        public static void int64$set( MemorySegment seg, long x) {
            u.int64$VH.set(seg, x);
        }
        public static long int64$get(MemorySegment seg, long index) {
            return (long)u.int64$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void int64$set(MemorySegment seg, long index, long x) {
            u.int64$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle double_$VH = u$union$LAYOUT.varHandle(PathElement.groupElement("double_"));
        public static VarHandle double_$VH() {
            return u.double_$VH;
        }
        public static double double_$get(MemorySegment seg) {
            return (double)u.double_$VH.get(seg);
        }
        public static void double_$set( MemorySegment seg, double x) {
            u.double_$VH.set(seg, x);
        }
        public static double double_$get(MemorySegment seg, long index) {
            return (double)u.double_$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void double_$set(MemorySegment seg, long index, double x) {
            u.double_$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle list$VH = u$union$LAYOUT.varHandle(PathElement.groupElement("list"));
        public static VarHandle list$VH() {
            return u.list$VH;
        }
        public static MemoryAddress list$get(MemorySegment seg) {
            return (MemoryAddress)u.list$VH.get(seg);
        }
        public static void list$set( MemorySegment seg, MemoryAddress x) {
            u.list$VH.set(seg, x);
        }
        public static MemoryAddress list$get(MemorySegment seg, long index) {
            return (MemoryAddress)u.list$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void list$set(MemorySegment seg, long index, MemoryAddress x) {
            u.list$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle ba$VH = u$union$LAYOUT.varHandle(PathElement.groupElement("ba"));
        public static VarHandle ba$VH() {
            return u.ba$VH;
        }
        public static MemoryAddress ba$get(MemorySegment seg) {
            return (MemoryAddress)u.ba$VH.get(seg);
        }
        public static void ba$set( MemorySegment seg, MemoryAddress x) {
            u.ba$VH.set(seg, x);
        }
        public static MemoryAddress ba$get(MemorySegment seg, long index) {
            return (MemoryAddress)u.ba$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ba$set(MemorySegment seg, long index, MemoryAddress x) {
            u.ba$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    static final VarHandle format$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("format"));
    public static VarHandle format$VH() {
        return mpv_node.format$VH;
    }
    public static int format$get(MemorySegment seg) {
        return (int)mpv_node.format$VH.get(seg);
    }
    public static void format$set( MemorySegment seg, int x) {
        mpv_node.format$VH.set(seg, x);
    }
    public static int format$get(MemorySegment seg, long index) {
        return (int)mpv_node.format$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void format$set(MemorySegment seg, long index, int x) {
        mpv_node.format$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


