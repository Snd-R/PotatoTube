// Generated by jextract

package mpv;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;

import static java.lang.foreign.ValueLayout.PathElement;
public class mpv_event_log_message {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("prefix"),
        Constants$root.C_POINTER$LAYOUT.withName("level"),
        Constants$root.C_POINTER$LAYOUT.withName("text"),
        Constants$root.C_INT$LAYOUT.withName("log_level"),
        MemoryLayout.paddingLayout(32)
    ).withName("mpv_event_log_message");
    public static MemoryLayout $LAYOUT() {
        return mpv_event_log_message.$struct$LAYOUT;
    }
    static final VarHandle prefix$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("prefix"));
    public static VarHandle prefix$VH() {
        return mpv_event_log_message.prefix$VH;
    }
    public static MemoryAddress prefix$get(MemorySegment seg) {
        return (MemoryAddress)mpv_event_log_message.prefix$VH.get(seg);
    }
    public static void prefix$set( MemorySegment seg, MemoryAddress x) {
        mpv_event_log_message.prefix$VH.set(seg, x);
    }
    public static MemoryAddress prefix$get(MemorySegment seg, long index) {
        return (MemoryAddress)mpv_event_log_message.prefix$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void prefix$set(MemorySegment seg, long index, MemoryAddress x) {
        mpv_event_log_message.prefix$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle level$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("level"));
    public static VarHandle level$VH() {
        return mpv_event_log_message.level$VH;
    }
    public static MemoryAddress level$get(MemorySegment seg) {
        return (MemoryAddress)mpv_event_log_message.level$VH.get(seg);
    }
    public static void level$set( MemorySegment seg, MemoryAddress x) {
        mpv_event_log_message.level$VH.set(seg, x);
    }
    public static MemoryAddress level$get(MemorySegment seg, long index) {
        return (MemoryAddress)mpv_event_log_message.level$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void level$set(MemorySegment seg, long index, MemoryAddress x) {
        mpv_event_log_message.level$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle text$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("text"));
    public static VarHandle text$VH() {
        return mpv_event_log_message.text$VH;
    }
    public static MemoryAddress text$get(MemorySegment seg) {
        return (MemoryAddress)mpv_event_log_message.text$VH.get(seg);
    }
    public static void text$set( MemorySegment seg, MemoryAddress x) {
        mpv_event_log_message.text$VH.set(seg, x);
    }
    public static MemoryAddress text$get(MemorySegment seg, long index) {
        return (MemoryAddress)mpv_event_log_message.text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void text$set(MemorySegment seg, long index, MemoryAddress x) {
        mpv_event_log_message.text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle log_level$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("log_level"));
    public static VarHandle log_level$VH() {
        return mpv_event_log_message.log_level$VH;
    }
    public static int log_level$get(MemorySegment seg) {
        return (int)mpv_event_log_message.log_level$VH.get(seg);
    }
    public static void log_level$set( MemorySegment seg, int x) {
        mpv_event_log_message.log_level$VH.set(seg, x);
    }
    public static int log_level$get(MemorySegment seg, long index) {
        return (int)mpv_event_log_message.log_level$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void log_level$set(MemorySegment seg, long index, int x) {
        mpv_event_log_message.log_level$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


