// Generated by jextract

package mpv;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;

import static java.lang.foreign.ValueLayout.PathElement;
public class mpv_node_list {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("num"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("values"),
        Constants$root.C_POINTER$LAYOUT.withName("keys")
    ).withName("mpv_node_list");
    public static MemoryLayout $LAYOUT() {
        return mpv_node_list.$struct$LAYOUT;
    }
    static final VarHandle num$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("num"));
    public static VarHandle num$VH() {
        return mpv_node_list.num$VH;
    }
    public static int num$get(MemorySegment seg) {
        return (int)mpv_node_list.num$VH.get(seg);
    }
    public static void num$set( MemorySegment seg, int x) {
        mpv_node_list.num$VH.set(seg, x);
    }
    public static int num$get(MemorySegment seg, long index) {
        return (int)mpv_node_list.num$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num$set(MemorySegment seg, long index, int x) {
        mpv_node_list.num$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle values$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("values"));
    public static VarHandle values$VH() {
        return mpv_node_list.values$VH;
    }
    public static MemoryAddress values$get(MemorySegment seg) {
        return (MemoryAddress)mpv_node_list.values$VH.get(seg);
    }
    public static void values$set( MemorySegment seg, MemoryAddress x) {
        mpv_node_list.values$VH.set(seg, x);
    }
    public static MemoryAddress values$get(MemorySegment seg, long index) {
        return (MemoryAddress)mpv_node_list.values$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void values$set(MemorySegment seg, long index, MemoryAddress x) {
        mpv_node_list.values$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle keys$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("keys"));
    public static VarHandle keys$VH() {
        return mpv_node_list.keys$VH;
    }
    public static MemoryAddress keys$get(MemorySegment seg) {
        return (MemoryAddress)mpv_node_list.keys$VH.get(seg);
    }
    public static void keys$set( MemorySegment seg, MemoryAddress x) {
        mpv_node_list.keys$VH.set(seg, x);
    }
    public static MemoryAddress keys$get(MemorySegment seg, long index) {
        return (MemoryAddress)mpv_node_list.keys$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void keys$set(MemorySegment seg, long index, MemoryAddress x) {
        mpv_node_list.keys$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


